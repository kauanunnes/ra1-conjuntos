{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["import fs from 'fs/promises';\n\nfunction uniao(arr1: any[], arr2: any[]) {\n  const arr = arr1;\n  arr2.forEach(value => {\n    if (arr.indexOf(value) === -1) {\n      arr.push(value)\n    }\n  })\n  return arr\n}\n\nfunction interseccao(arr1: any[], arr2: any[]) {\n  const arr: Number[] = [];\n  for (let item of arr1) {\n    if (arr2.indexOf(item) !== -1) {\n      if (arr.indexOf(item) === -1) {\n        arr.push(item)\n      }\n    }\n  }\n  return arr\n}\n\nfunction diferenca(arr1: any[], arr2: any[]) {\n  const arr: Array<any> = [];\n  for (let item of arr1) {\n    if (arr2.indexOf(item) !== -1) {\n      if (arr.indexOf(item) === -1) {\n        arr.push(item)\n      }\n    }\n  }\n\n  arr.forEach(value => {\n    let index = arr1.indexOf(value)\n    arr1.splice(index, 1)\n  })\n  return arr1\n}\n\n\nfunction prodCartesiano(arr1: any[], arr2: any[]) {\n  let arrFinal: any[] = []\n  arrFinal = arr1.map(value => {\n    const final: any[] = [];\n    arr2.forEach(item => {\n      const current = `{${value}, ${item}}`;\n      let permission = true;\n      final.forEach(it => {\n        if (it.indexOf(current) != -1) {\n          permission = false\n        }\n      })\n      if (permission) {\n        final.push(current)\n      }\n    })\n    return final;\n  })\n  return arrFinal\n}\n\nfunction dividir(arr: string[]) {\n  let objReturn = [];\n  for (let i = 0; i < arr.length; i += 3) {\n    let obj = {\n      operation: arr[i],\n      a: arr[i + 1].split(\", \"),\n      b: arr[i + 2].split(\", \"),\n    }\n    objReturn.push(obj)\n  }\n  return objReturn;\n}\n\nasync function main() {\n  const FILE = await fs.readFile('./file.txt', { encoding: \"utf-8\" });\n\n  const [operacoes, ...conj] = FILE.split(\"\\n\");\n  const props = dividir(conj);\n  for (let i = 0; i < Number(operacoes); i++) {\n    switch (props[i].operation) {\n      case \"U\":\n        console.log('Uni\u00E3o: ', uniao(props[i].a, props[i].b));\n        break\n      case \"I\":\n        console.log('Intersec\u00E7\u00E3o: ', interseccao(props[i].a, props[i].b));\n        break\n      case \"D\":\n        console.log('Diferen\u00E7a: ', diferenca(props[i].a, props[i].b));\n        break\n      case \"C\":\n        console.log('Produto Cartesiano: ', prodCartesiano(props[i].a, props[i].b));\n        break\n    }\n  }\n\n}\n\nmain();"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,sBAAe;AAEf,eAAe,MAAa,MAAa;AACvC,QAAM,MAAM;AACZ,OAAK,QAAQ,WAAS;AACpB,QAAI,IAAI,QAAQ,WAAW,IAAI;AAC7B,UAAI,KAAK;AAAA;AAAA;AAGb,SAAO;AAAA;AAGT,qBAAqB,MAAa,MAAa;AAC7C,QAAM,MAAgB;AACtB,WAAS,QAAQ,MAAM;AACrB,QAAI,KAAK,QAAQ,UAAU,IAAI;AAC7B,UAAI,IAAI,QAAQ,UAAU,IAAI;AAC5B,YAAI,KAAK;AAAA;AAAA;AAAA;AAIf,SAAO;AAAA;AAGT,mBAAmB,MAAa,MAAa;AAC3C,QAAM,MAAkB;AACxB,WAAS,QAAQ,MAAM;AACrB,QAAI,KAAK,QAAQ,UAAU,IAAI;AAC7B,UAAI,IAAI,QAAQ,UAAU,IAAI;AAC5B,YAAI,KAAK;AAAA;AAAA;AAAA;AAKf,MAAI,QAAQ,WAAS;AACnB,QAAI,QAAQ,KAAK,QAAQ;AACzB,SAAK,OAAO,OAAO;AAAA;AAErB,SAAO;AAAA;AAIT,wBAAwB,MAAa,MAAa;AAChD,MAAI,WAAkB;AACtB,aAAW,KAAK,IAAI,WAAS;AAC3B,UAAM,QAAe;AACrB,SAAK,QAAQ,UAAQ;AACnB,YAAM,UAAU,IAAI,UAAU;AAC9B,UAAI,aAAa;AACjB,YAAM,QAAQ,QAAM;AAClB,YAAI,GAAG,QAAQ,YAAY,IAAI;AAC7B,uBAAa;AAAA;AAAA;AAGjB,UAAI,YAAY;AACd,cAAM,KAAK;AAAA;AAAA;AAGf,WAAO;AAAA;AAET,SAAO;AAAA;AAGT,iBAAiB,KAAe;AAC9B,MAAI,YAAY;AAChB,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK,GAAG;AACtC,QAAI,MAAM;AAAA,MACR,WAAW,IAAI;AAAA,MACf,GAAG,IAAI,IAAI,GAAG,MAAM;AAAA,MACpB,GAAG,IAAI,IAAI,GAAG,MAAM;AAAA;AAEtB,cAAU,KAAK;AAAA;AAEjB,SAAO;AAAA;AAGT,sBAAsB;AACpB,QAAM,OAAO,MAAM,wBAAG,SAAS,cAAc,EAAE,UAAU;AAEzD,QAAM,CAAC,cAAc,QAAQ,KAAK,MAAM;AACxC,QAAM,QAAQ,QAAQ;AACtB,WAAS,IAAI,GAAG,IAAI,OAAO,YAAY,KAAK;AAC1C,YAAQ,MAAM,GAAG;AAAA,WACV;AACH,gBAAQ,IAAI,cAAW,MAAM,MAAM,GAAG,GAAG,MAAM,GAAG;AAClD;AAAA,WACG;AACH,gBAAQ,IAAI,uBAAiB,YAAY,MAAM,GAAG,GAAG,MAAM,GAAG;AAC9D;AAAA,WACG;AACH,gBAAQ,IAAI,kBAAe,UAAU,MAAM,GAAG,GAAG,MAAM,GAAG;AAC1D;AAAA,WACG;AACH,gBAAQ,IAAI,wBAAwB,eAAe,MAAM,GAAG,GAAG,MAAM,GAAG;AACxE;AAAA;AAAA;AAAA;AAMR;",
  "names": []
}
